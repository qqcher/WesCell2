for (i in 1:nrow(x)){
a <- nstemplate[i, paste("Well.rw")]
b <- nstemplate[i, paste("Well.cl")]
c <- round(x[i, ratio.marker.1],digits = 3)
template[paste(a),paste(b)] <- c
}
return(template)
}
input.plate <- file.to.plate(xx, wn, var)
rm(xx, file.path, var, wn, blankplate1, file.to.plate)
for (i in 1:nrow(template)){
for (j in 1:ncol(template)){
template[i,j] <- input.plate[i,j]
}
}
rm(i, j, input.plate)
# Average technical duplicates
if (row.col == "prim.samp" & dup.orientatio == "R"){
l <- ncol(template) / 2
avCt.plate <- data.frame(matrix(ncol = l, nrow = nrow(template)))
colnames(avCt.plate) <- spl
rownames(avCt.plate) <- prm
for (i in 1:nrow(template)){
for (j in 1:l){
jj <- j * 2
jjj <- j * 2 -1
avCt.plate[i,j] <- mean(c(template[i,jj],template[i,jjj]), na.rm = T)
}
}
rm(i, j, jj, jjj, l)
}
if (row.col == "samp.prim" & dup.orientatio == "R"){
l <- ncol(template) / 2
avCt.plate <- data.frame(matrix(ncol = l, nrow = nrow(template)))
colnames(avCt.plate) <- prm
rownames(avCt.plate) <- spl
for (i in 1:nrow(template)){
for (j in 1:l){
jj <- j * 2
jjj <- j * 2 -1
avCt.plate[i,j] <- mean(c(template[i,jj],template[i,jjj]), na.rm = T)
}
}
rm(i, j, jj, jjj, l)
}
if (row.col == "prim.samp" & dup.orientatio == "C"){
l <- nrow(template) / 2
avCt.plate <- data.frame(matrix(ncol = ncol(template), nrow = l))
colnames(avCt.plate) <- spl
rownames(avCt.plate) <- prm
for (i in 1:ncol(template)){
for (j in 1:l){
jj <- j * 2
jjj <- j * 2 -1
avCt.plate[j,i] <- mean(c(template[jj,i],template[jjj,i]), na.rm = T)
}
}
rm(i, j, jj, jjj, l)
}
if (row.col == "samp.prim" & dup.orientatio == "C"){
l <- nrow(template) / 2
avCt.plate <- data.frame(matrix(ncol = ncol(template), nrow = l))
colnames(avCt.plate) <- prm
rownames(avCt.plate) <- spl
for (i in 1:ncol(template)){
for (j in 1:l){
jj <- j * 2
jjj <- j * 2 -1
avCt.plate[j,i] <- mean(c(template[jj,i],template[jjj,i]), na.rm = T)
}
}
rm(i, j, jj, jjj, l)
}
# Calculate dCt (d to the housekeeping gene)
hk <- readline(prompt="Which primer is your reference gene?   ")
dCt.plate <- data.frame(matrix(ncol = ncol(avCt.plate), nrow = nrow(avCt.plate)))
if (row.col == "prim.samp"){
colnames(dCt.plate) <- spl
rownames(dCt.plate) <- prm
hk.gene <- avCt.plate[hk,]
for (i in 1:nrow(avCt.plate)){
for (j in 1:ncol(avCt.plate)){
dCt.plate[i,j] <- ( avCt.plate[i,j] - hk.gene[,j] )
}
}
rm(i, j, hk.gene)
}
if (row.col == "samp.prim"){
colnames(dCt.plate) <- prm
rownames(dCt.plate) <- spl
hk.gene <- avCt.plate[,hk]
for (i in 1:ncol(avCt.plate)){
for (j in 1:nrow(avCt.plate)){
dCt.plate[j,i] <- ( avCt.plate[j,i] - hk.gene[j] )
}
}
rm(i, j, hk.gene)
}
# Calculate ddCt (d to the reference sample)
ctrl <- readline(prompt="Which sample is your control?   ")
ddCt.plate <- data.frame(matrix(ncol = ncol(avCt.plate), nrow = nrow(avCt.plate)))
if (row.col == "prim.samp"){
colnames(ddCt.plate) <- spl
rownames(ddCt.plate) <- prm
ctrl.spl <- dCt.plate[,ctrl]
for (i in 1:ncol(dCt.plate)){
for (j in 1:nrow(dCt.plate)){
ddCt.plate[j,i] <- ( dCt.plate[j,i] - ctrl.spl[j] )
}
}
rm(i, j, ctrl.spl)
}
if (row.col == "samp.prim"){
colnames(ddCt.plate) <- prm
rownames(ddCt.plate) <- spl
ctrl.spl <- dCt.plate[ctrl,]
for (i in 1:nrow(dCt.plate)){
for (j in 1:ncol(dCt.plate)){
ddCt.plate[i,j] <- ( dCt.plate[i,j] - ctrl.spl[,j] )
}
}
rm(i, j, ctrl.spl)
}
# Calculate the exponential of ddCt
exp.plate <- ddCt.plate
for (i in 1:ncol(ddCt.plate)){
for (j in 1:nrow(ddCt.plate)){
exp.plate[j,i] <- round((2^(-(ddCt.plate[j,i]))),3)
}
}
rm (i, j)
datalist = list()
datalist[[1]] <- template
datalist[[2]] <- avCt.plate
datalist[[3]] <- dCt.plate
datalist[[4]] <- ddCt.plate
datalist[[5]] <- exp.plate
names(datalist) <- c("full.data","Ct.data","dCt.data","ddCt.data","exp.data")
return(datalist)
}
#' Remove rows in a data frame.
#'
#' Will remove rows in a data frame when either one variable matches a value in said row or when said row matches two separate values.
#' Easy method to remove replicate associated with a specif Primer and/or Sample # in a master file.
#' The function only asks for a data frame, the function will then prompt for additional questions.
#'
#' @param df A data frame
#' @return A new data frame without the dropped rows
#' @examples
#' \dontrun{
#' new.df <- clean.data(df)
#' }
#' @import stats
clean.data <- function(df) {
x <- readline(prompt="Do you want do delete all the data associated with one variable? (i.e. sample) Yes/No  ")
if (x == "Yes") {
xx <- readline(prompt="What is the name of the column containing said variable? (i.e. Sample #)   ")
xxx <- readline(prompt="What is the value in to column entered above whose associated data needs to be dropped? (i.e. 34)   ")
y <- paste("all the data associated with", xx, xxx, "will be dropped, confirm? Yes/No   ")
yy <- readline(prompt=y)
if (yy == "Yes") {
for (i in 1:nrow(df)) {
if (df[i,xx] == xxx) {
df[i,xx] <- NA
}
}
df <- stats::na.omit(df)
return(df)
} else {
return(print("function aborted"))
}
rm(xx, xxx, y, yy, i)
}
if (x == "No") {
x <- readline(prompt="Do you want do delete all the data associated with two variable at once? (i.e. sample) Yes/No  ")
if (x == "Yes") {
xx <- readline(prompt="What is the name of the column containing the first variable? (i.e. Sample #)   ")
n.xx <- readline(prompt="What is the value in to column entered above whose associated data needs to be dropped? (i.e. 34)   ")
xxx <- readline(prompt="What is the name of the column containing the second variable? (i.e. Primer)   ")
n.xxx <- readline(prompt="What is the value in to column entered above whose associated data needs to be dropped? (i.e. TNF)   ")
y <- paste("all the data associated with", xx, n.xx, "and", xxx, n.xxx, "will be dropped, confirm? Yes/No   ")
yy <- readline(prompt=y)
if (yy == "Yes") {
for (i in 1:nrow(df)) {
if (df[i,xx] == n.xx & df[i,xxx] == n.xxx) {
df[i,xx] <- NA
df[i,xxx] <- NA
}
}
df <- stats::na.omit(df)
return(df)
} else {
return(print("function aborted"))
}
} else {return("this function can only drop data associate with ONE or TWO variable(s), function aborted")}
}
rm(xx, xxx, n.xx, n.xxx, y, yy, i)
}
#' Average technical replicates into biological replicates.
#'
#' Will average technical replicates into biological replicates.
#'
#' @param df A data frame
#' @param subset1.var.name Name of the first subsetting variable (e.g. Primer). Has to match a column name in the data frame.
#' @param subset2.var.name Name of the second subsetting variable (e.g. Condition). Has to match a column name in the data frame.
#' @param subset3.var.name Name of the third subsetting variable (e.g. Sample). Has to match a column name in the data frame.
#' @param data Name of the column containing the values to average. Has to match a column name in the data frame.
#' @param data.add Additional variable you wish to carry over to the new data frame. Has to match a column name in the data frame.
#' @return A new data frame with average of technical replicates.
#' @examples
#' \dontrun{
#' new.df <- df.3sub.unique.av(df,"Primer","inflammatory.factor","Sample","exp.data","cell.line")
#' }
df.3sub.unique.av <- function(df,subset1.var.name,subset2.var.name,subset3.var.name,data,data.add) {
x <- unique(df[subset1.var.name])
subset1.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset1.var.list[i] <- fill
}
x <- unique(df[subset2.var.name])
subset2.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset2.var.list[i] <- fill
}
final <- data.frame()
r <- 1
for (i in 1:length(subset1.var.list)){
subset1 <- subset(df, df[subset1.var.name] == subset1.var.list[i])
for (j in 1:length(subset2.var.list)) {
subset2 <- subset(subset1, subset1[subset2.var.name] == subset2.var.list[j])
x <- unique(subset2[subset3.var.name])
subset3.var.list <- c()
for (k in 1:nrow(x)){
fill <- as.character(x[k,1])
subset3.var.list[k] <- fill
}
for (l in 1:length(subset3.var.list)) {
subset3 <- subset(subset2, subset2[subset3.var.name] == subset3.var.list[l])
final[r,subset1.var.name] <- subset1.var.list[i]
final[r,subset2.var.name] <- subset2.var.list[j]
final[r,subset3.var.name] <- subset3.var.list[l]
final[r,data.add] <- subset3[1,data.add]
final[r,"n"] <- nrow(subset3[data])
mean.calc <- c()
for (m in 1:nrow(subset3[data])){
fill <- as.numeric(subset3[m,data])
mean.calc[m] <- fill
}
z <- summary(mean.calc)
col <- paste0("average.of.",data)
final[r,col] <- z["Mean"]
final[r,"spread"] <- abs(z["Min."] - z["Max."])
for (q in 1:length(mean.calc)){
fill <- mean.calc[q]
colname <- paste0("value#",q)
final[r,colname] <- fill
}
r <- r + 1
}
}
}
return(final)
}
#' Perform a serie of t-test based on two subsetting variable.
#'
#' A time saver when working with  large number of Primer and experimental condition.
#'
#' @param df A data frame
#' @param subset1.var.name Name of the first subsetting variable (e.g. Primer). Has to match a column name in the data frame.
#' @param subset2.var.name Name of the second subsetting variable (e.g. Condition). Has to match a column name in the data frame.
#' @param t.test.var1 Name of the column containing the data. Has to match a column name in the data frame.
#' @param t.test.var2 Name of the grouping variable for the t-test. Has to match a column name in the data frame.
#' @return A new data frame with a list of p-value for all grouping combinations.
#' @examples
#' \dontrun{
#' new.df <- df.t.test(df,"Primer","inflammatory.factor","exp.data","cell.line")
#' }
#' @import stats
df.t.test <- function(df,subset1.var.name,subset2.var.name,t.test.var1,t.test.var2) {
x <- unique(df[subset1.var.name])
subset1.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset1.var.list[i] <- fill
}
x <- unique(df[subset2.var.name])
subset2.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset2.var.list[i] <- fill
}
final <- data.frame(matrix(ncol = 5, nrow = 1))
colnames(final) <- c("data.used", "test.performed.by", "subset.var.1", "subset.var.2", "p.value")
k <- 1
for (i in 1:length(subset1.var.list)){
subset1 <- subset(df, df[subset1.var.name] == subset1.var.list[i])
for (j in 1:length(subset2.var.list)) {
subset2 <- subset(subset1, subset1[subset2.var.name] == subset2.var.list[j])
result <- stats::t.test(subset2[[t.test.var1]]~subset2[[t.test.var2]])
p <- result$p.value
final[k,"data.used"] <-  t.test.var1
final[k,"test.performed.by"] <- t.test.var2
final[k,"subset.var.1"] <- subset1.var.list[i]
final[k,"subset.var.2"] <- subset2.var.list[j]
final[k,"p.value"] <- p
k <- k + 1
}
}
return(final)
}
#' Perform a serie of Wilcoxon test based on two subsetting variable.
#'
#' A time saver when working with  large number of Primer and experimental condition.
#'
#' @param df A data frame
#' @param subset1.var.name Name of the first subsetting variable (e.g. Primer). Has to match a column name in the data frame.
#' @param subset2.var.name Name of the second subsetting variable (e.g. Condition). Has to match a column name in the data frame.
#' @param t.test.var1 Name of the column containing the data. Has to match a column name in the data frame.
#' @param t.test.var2 Name of the grouping variable for the Wilcoxon test. Has to match a column name in the data frame.
#' @return A new data frame with a list of p-value for all grouping combinations.
#' @examples
#' \dontrun{
#' new.df <- df.wilcoxon.test(df,"Primer","inflammatory.factor","exp.data","cell.line")
#' }
#' #' @import stats
df.wilcoxon.test <- function(df,subset1.var.name,subset2.var.name,t.test.var1,t.test.var2) {
x <- unique(df[subset1.var.name])
subset1.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset1.var.list[i] <- fill
}
x <- unique(df[subset2.var.name])
subset2.var.list <- c()
for (i in 1:nrow(x)){
fill <- as.character(x[i,1])
subset2.var.list[i] <- fill
}
final <- data.frame(matrix(ncol = 5, nrow = 1))
colnames(final) <- c("data.used", "test.by", "subset.var.1", "subset.var.2", "p.value")
k <- 1
for (i in 1:length(subset1.var.list)){
subset1 <- subset(df, df[subset1.var.name] == subset1.var.list[i])
for (j in 1:length(subset2.var.list)) {
subset2 <- subset(subset1, subset1[subset2.var.name] == subset2.var.list[j])
result <- stats::wilcox.test(subset2[[t.test.var1]]~subset2[[t.test.var2]], paired = F, exact = F)
p <- result$p.value
final[k,"data.used"] <-  t.test.var1
final[k,"test.by"] <- t.test.var2
final[k,"subset.var.1"] <- subset1.var.list[i]
final[k,"subset.var.2"] <- subset2.var.list[j]
final[k,"p.value"] <- p
k <- k + 1
}
}
return(final)
}
#' An intuitive way to add missing information to analysed values.
#'
#' Will fill a variable in a data frame when either one secondary variable matches a value in said row or when said row matches two separate secondary values.
#' The function only asks for a data frame, the function will then prompt for additional questions.
#'
#' @param df A data frame
#' @return A new data frame with the newly filled-in information.
#' @examples
#' \dontrun{
#' new.df <- fill.variable(df)
#' }
fill.variable <- function(df) {
var <- readline(prompt="Which variable are you trying to fill (i.e. cell.line)?    ")
prpt <- paste("Would you like to fill",var,"with the same data for the entire data frame? Yes/No   ")
yn <- readline(prompt=prpt)
if (yn == "Yes") {
prpt <- paste("What value would you like to fill",var,"with?   ")
print <- readline(prompt=prpt)
for (i in 1:nrow(df)) {
df[i,var] <- print
}
return(df)
}
prpt <- paste("Would you like to fill",var,"only on rows matching a specific secondary variable? Yes/No   ")
yn <- readline(prompt=prpt)
if (yn == "Yes") {
prpt <- paste("What is the name of the secondary variable you will use to fill", var, "with more specificity?   ")
var.2 <- readline(prompt=prpt)
prpt <- paste("What is the value of", var.2, "you want to match to specifically fill", var, "?   ")
var.2.val <- readline(prompt=prpt)
prpt <- paste("What is the value you want", var, "filled with when", var.2, "match", var.2.val, "?   ")
var.val <- readline(prompt=prpt)
for (i in 1:nrow(df)) {
if (df[i,var.2] == var.2.val)
df[i,var] <- var.val
}
return(df)
}
return(print("Something went wrong, please check that your input is correct"))
}
#' Convert analyse.qPCR() outputs into an easy to read data frame.
#'
#' Will convert the list generated by analyse.qPCR() into an easy to read data frame.
#' The output of analyse.qPCR() HAS TO go through this finction before being used with any other function part of the WesCell package.
#'
#' @param df A list generated by analyse.qPCR()
#' @return A new data frame with the newly filled-in information.
#' @examples
#' \dontrun{
#' new.df <- list.to.df(list)
#' }
list.to.df <- function(df) {
print("as of right now this function is designed with samples along to comlumns, primers in the rows, and replicates within the rows")
df.1 <- df[[1]]
df.2 <- df[[2]]
df.3 <- df[[3]]
df.4 <- df[[4]]
df.5 <- df[[5]]
final <- data.frame(matrix(ncol = 8, nrow = 1))
colnames(final) <- c("Sample", "raw.data.1", "raw.data.2", "av.data", "dCt.data", "ddCt.data", "exp.data", "Primer")
k <- 1
for (i in 1:nrow(df.5)){
for (j in 1:ncol(df.5)){
final[k,"Sample"] <-  colnames(df.5[j])
final[k,"Primer"] <- rownames(df.5[i,])
final[k,"exp.data"] <- df.5[i,j]
final[k,"ddCt.data"] <- df.4[i,j]
final[k,"dCt.data"] <- df.3[i,j]
final[k,"av.data"] <- df.2[i,j]
final[k,"raw.data.1"] <- df.1[i,j*2-1]
final[k,"raw.data.2"] <- df.1[i,j*2]
k <- k + 1
}
}
return(final)
}
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
setwd("~/Desktop/WesCell")
setwd("~/Desktop/WesCell")
mtcars
mydata = mtcars
wrwrite.csv(mydata, /inst)
write.csv(mydata, "/inst/mydata.csv")
write.csv(mydata, "~/Desktop/WesCell/inst/mydata.csv")
system.file("mydata", package="WesCell")
library(WesCell)
library(WesCell)
library(WesCell)
if (!require(devtools)){
install.packages("devtools")
}
devtools::install_github("qqcher/WesCell")
devtools::install_github("qqcher/WesCell")
if (!require(devtools)){
install.packages("devtools")
}
devtools::install_github("qqcher/WesCell")
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
devtools::install_github("qqcher/WesCell")
devtools::install_github("qqcher/WesCell")
if (!require(devtools)){
install.packages("devtools")
}
devtools::install_github("qqcher/WesCell")
library(WesCell)
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
library(WesCell)
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
result_df <- list.to.df(mydata)
library(WesCell)
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
library(WesCell)
result <- analyze.qPCR(system.file("mydata", package="WesCell"))
WesCell::analyze.qPCR
build_site()
## Willcoxon Test
Wilcoxon <-  df.wilcoxon.test(mydata,"Primer","inflammatory.factor","exp.data","cell.line")
build_site()
build_site()
build_site()
build_site()
add.variable(df)
devtools::install_github("qqcher/WesCell")
add.variable(df)
add.variable(df)
devtools::install_github("qqcher/WesCell")
add.variable(mydata)
devtools::install_github("qqcher/WesCell")
add_variable_one(mydata)
library(WesCell)
result <- analyze.qPCR("your raw RT-qPCR csv file")
result_df <- list.to.df(result)
library(WesCell)
result <- analyze.qPCR("your raw RT-qPCR csv file")
library(WesCell)
result <- analyze.qPCR("your raw RT-qPCR csv file")
library(WesCell)
result <- analyze.qPCR("your raw RT-qPCR csv file")
library(WesCell)
#result <- analyze.qPCR("your raw RT-qPCR csv file")
WesCell::analyze.qPCR("your raw RT-qPCR csv file")
WesCell::analyze.qPCR("your raw RT-qPCR csv file")
library(WesCell)
add_variable_one(mydata)
